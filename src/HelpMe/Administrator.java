/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package HelpMe;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Objects;
import java.util.ArrayList;
import java.util.List;

/**
 * @author pipe
 */
public class Administrator extends javax.swing.JFrame {

    /**
     * Creates new form Administrator
     */
    public Administrator() {
        initComponents();
        SwingUtilities.invokeLater(this::start);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ClientTwoMessage = new javax.swing.JTextArea();
        ClientTwoSendButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ClientTwoMessagesList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        ClientOneMessagesList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        ClientOneMessage = new javax.swing.JTextArea();
        ClientOneSendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        ClientTwoMessage.setColumns(20);
        ClientTwoMessage.setRows(5);
        jScrollPane1.setViewportView(ClientTwoMessage);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(460, 220, 280, 60);

        ClientTwoSendButton.setText("Send");
        getContentPane().add(ClientTwoSendButton);
        ClientTwoSendButton.setBounds(760, 220, 80, 60);

        ClientTwoMessagesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane2.setViewportView(ClientTwoMessagesList);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(460, 20, 380, 190);

        ClientOneMessagesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane3.setViewportView(ClientOneMessagesList);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 20, 380, 190);

        ClientOneMessage.setColumns(20);
        ClientOneMessage.setRows(5);
        jScrollPane4.setViewportView(ClientOneMessage);

        getContentPane().add(jScrollPane4);
        jScrollPane4.setBounds(10, 221, 280, 60);

        ClientOneSendButton.setText("Send");
        getContentPane().add(ClientOneSendButton);
        ClientOneSendButton.setBounds(310, 220, 80, 60);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Administrator window = new Administrator();

                window.setVisible(true);
                window.setSize(860, 320);
            }
        });
    }

    private void start() {
        try {
            Socket socket = new Socket("localhost", 8888);
            PrintWriter writer = new PrintWriter(socket.getOutputStream());

            System.out.println("Administrator connected. Type 'exit' to quit.");

            if (ClientOneSendButton != null) {
                ClientOneSendButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String message = ClientOneMessage.getText();
                        writer.println("Administrator1: " + message);
                        writer.flush();
                        ClientOneMessage.setText("");
                    }
                });
            }

            if (ClientTwoSendButton != null) {
                ClientTwoSendButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        String message = ClientTwoMessage.getText();
                        writer.println("Administrator2: " + message);
                        writer.flush();
                        ClientTwoMessage.setText("");
                    }
                });
            }

            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            SwingWorker<Void, String> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() throws IOException {

                    handleClient(socket, reader);

                    return null;
                }
            };

            worker.execute();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void handleClient(Socket socket, BufferedReader reader) {
        SwingWorker<Void, String> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() {
                try {
                    String message;

                    while ((message = reader.readLine()) != null) {
                        publish(message);
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                }

                return null;
            }

            @Override
            protected void process(java.util.List<String> chunks) {
                for (String message : chunks) {
                    if (message.startsWith("Client1") || message.startsWith("Administrator1")) {
                        clientOneMessages.add(message);
                        ClientOneMessagesList.setListData(clientOneMessages.toArray(new String[0]));
                    }

                    if (message.startsWith("Client2") || message.startsWith("Administrator2")) {
                        clientTwoMessages.add(message);
                        ClientTwoMessagesList.setListData(clientTwoMessages.toArray(new String[0]));
                    }
                }
            }

            @Override
            protected void done() {
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        };

        worker.execute();
    }

    private String[] appendWord(String[] array, String word) {
        String[] newArray = new String[array.length + 1];
        System.arraycopy(array, 0, newArray, 0, array.length);
        newArray[array.length] = word;
        return newArray;
    }


    private List<String> clientOneMessages = new ArrayList<>();
    private List<String> clientTwoMessages = new ArrayList<>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ClientOneMessage;
    private javax.swing.JList<String> ClientOneMessagesList;
    private javax.swing.JButton ClientOneSendButton;
    private javax.swing.JTextArea ClientTwoMessage;
    private javax.swing.JList<String> ClientTwoMessagesList;
    private javax.swing.JButton ClientTwoSendButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
